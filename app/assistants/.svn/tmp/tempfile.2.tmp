function ConfigureAssistant() {
	/* this is the creator function for your scene assistant object. It will be passed all the 
	   additional parameters (after the scene name) that were passed to pushScene. The reference
	   to the scene controller (this.controller) has not be established yet, so any initialization
	   that needs the scene controller should be done in the setup function below. */
}

ConfigureAssistant.prototype.setup = function() {
	Mojo.Log.info('*****************BEGINNING AGAIN***********************');
	/* this function is for setup tasks that have to happen when the scene is first created */
		
	/* use Mojo.View.render to render view templates and add them to the scene, if needed. */
	//Setup local contacts store 
	this.contacts = [];
	this.status = "Submit";
	 /*value: "david_quail@hotmail.com",*/
	this.controller.setupWidget("email",
         { hintText: $L('Email ...')},
         this.nameModel = {
            
             value: "tmting@gmail.com",
             disabled: false
    });
     /*value: "helama28",*/
    this.controller.setupWidget("password",
         { hintText: $L('Password ...')},
         this.passwordModel = {
            
             value: "cyclops",
             disabled: false
             
    });
    this.controller.setupWidget("progressbar",
    	{	modelProperty: 'progress',
    	 	title: this.status},
    	this.progressbarModel = {
    		progress: 0
    });
    
   
    Mojo.Log.info('Widgets setup');
	
	/* add event handlers to listen to events from widgets */
	this.submitHandler = this.submitReceivedHandler.bind(this);
	
	this.controller.listen("progressbar", Mojo.Event.tap, this.submitHandler);
	Mojo.Log.info('Handlers setup');
}

ConfigureAssistant.prototype.submitReceivedHandler = function(event) {
	//Change models
	this.nameModel.disabled = true;
	this.passwordModel.disabled = true;
	this.progressbarModel.title = "Contacting server...";
	this.controller.modelChanged(this.nameModel);
	this.controller.modelChanged(this.passwordModel);
	this.controller.modelChanged(this.progressbarModel);
	
	Mojo.Log.info('Submit received - email:', $('email').mojo.getValue(), 'password:', $('password').mojo.getValue());
	var parameters = 'login=' + $('email').mojo.getValue() + '&password=' + $('password').mojo.getValue();
	Mojo.Log.info(parameters);
	var request = new Ajax.Request('https://m.linkedin.com/session', {
					method: 'post',
					parameters: parameters,
					onSuccess: this.authTokenReceivedHandler.bind(this),
					onFailure: this.failureHandler.bind(this, 2)
					});
					
	Mojo.Log.info('AJAX login sent');
}

ConfigureAssistant.prototype.authTokenReceivedHandler = function(event) {
	Mojo.Log.info("Received redirect; sending AJAX contact list request");
	if (event.responseText.match('Incorrect username or password')) {
		Mojo.Log.info("Incorrect user name");
		this.failureHandler(1);
	} else {
		var request = new Ajax.Request('http://m.linkedin.com/contacts?limit=500', {
						method: 'get',
						onSuccess: this.contactListReceivedHandler.bind(this),
						onFailure: this.failureHandler.bind(this, 3)
						});
	
		Mojo.Log.info("AJAX contact list request sent");
	}
}

ConfigureAssistant.prototype.contactListReceivedHandler = function(event) {
	Mojo.Log.info("Received Contact List");
	
	/*for (var i in event) {
			Mojo.Log.info(i, "=>", event[i]);
	} */
	this.links = event.responseText.match(/\/members\/.*?contacts/g);
	this.emails = event.responseText.match(/href="mailto:.*?"/g);	
	Mojo.Log.info("Pulled emails and links.");
	//Slice emails for useful content
	for (var i = 0; i < this.emails.length; i++) {
		this.emails[i] = this.emails[i].slice(13, -1);
	}
	
	//Shuffle logic goes here

	//Start contact AJAX calls
	this.totalContacts = this.links.length - 1;
	this.contactsReceived = 0;
	for (var i = 0; i < 3; i++) {
		Mojo.Log.info("Initiating AJAX request for contact", i, this.emails[i]);
		var request = new Ajax.Request('http://m.linkedin.com' + this.links[i], {
					method: 'get',
					onSuccess: this.contactReceivedHandler.bind(this, this.emails[i]),
					onFailure: this.failureHandler.bind(this, 4)
					});
		Mojo.Log.info("Finishing AJAX request for contact", i);
	}
}

ConfigureAssistant.prototype.contactReceivedHandler = function(email, event) {

	Mojo.Log.info("Contact Received");
	var contact = {};
	contact.email = email;
	
	//Get info from page
	//~~Basic Info
	//name
	var temp = event.responseText.match(/<h1>(.*?)<\/h1>/);
	temp = temp[1];
	contact.name = temp;
	//Mojo.Log.info(contact.name);
	
	//photo_url
	//TODO: Add check to see if there's no photo; if none, don't try to put it in.
	temp = 'alt="' + contact.name + '" src="(.*?\.jpg)';
	temp = event.responseText.match(temp);
	if (temp) {
		temp = temp[1];
		contact.photo_url = temp;
		//Mojo.Log.info(contact.photo_url);
	}
	
	//title
	temp = event.responseText.match(/<\/h1>[\s]*?<div>(.*?)<\/div>/);
	temp = temp[1];
	contact.title = temp;
	
	Mojo.Log.info("Got past basic information.", contact.name, contact.title);

	
	//~~Detailed Info
	//~Work History 
	//title
	var title = event.responseText.match(/<h3 class="title">.*?<\/h3>/g);
	//If no results for title, skip this, b/c that indicates no work history.
	if (title) {
		for (var i = 0; i < title.length; i++) {
			title[i] = title[i].slice(18, -5);
			//Mojo.Log.info(title[i]);
		}
	
		//company
		var company = event.responseText.match(/<h4 class="org summary">.*?<\/h4>/g);
		for (var i = 0; i < company.length; i++) {
			company[i] = company[i].slice(24, -5);
			//Mojo.Log.info(company[i]);
		}
	
		//Period
		//start (pulls starts from education too)
		var start = event.responseText.match(/<abbr class="dtstart">(.*?)<\/abbr>/g);
		if (start) {
			for (var i = 0; i < start.length; i++) {
				start[i] = start[i].slice(22, -7);
				//Mojo.Log.info(start[i]);
			}
			//Work End
			var wkEnd = event.responseText.match(/<abbr class="dtstamp">(.*?)<\/abbr>/g);
			if (wkEnd) {
				for (var i = 0; i < wkEnd.length; i++) {
					wkEnd[i] = wkEnd[i].slice(22, -7);
					//Mojo.Log.info(wkEnd[i]);
				}
			}
			
			//Education End: <abbr class="dtend">(.*?)<\/abbr>
			var edEnd = event.responseText.match(/<abbr class="dtend">(.*?)<\/abbr>/g);
			if (edEnd) {
				for (var i = 0; i < edEnd.length; i++) {
					edEnd[i] = edEnd[i].slice(20, -7);
					//Mojo.Log.info(edEnd[i]);
				}
			}
		}
		//add to contact
		contact.work_history = [];
		for (var i = 0; i < title.length; i++) {
			contact.work_history[i] = {
				title: title[i],
				company: company[i],
			};
			if (start && wkEnd && wkEnd.length > i) {
				contact.work_history[i].period = start[i] + " &mdash; " + wkEnd[i];
			}
			//Mojo.Log.info("Work History pass", i, contact.work_history);
		}
	}
	Mojo.Log.info("Starting Education History");
	//~Education History
	//school
	var school = event.responseText.match(/<h3 class="summary fn org">.*?<\/h3>/g);
	if (school) {
		for (var i = 0; i < school.length; i++) {
			school[i] = school[i].slice(27, -5);
			//Mojo.Log.info(school[i]);
		}
	
		//Period
		//Start (do only if we didn't do work history)
		if (!title) {
			var start = event.responseText.match(/<abbr class="dtstart">(.*?)<\/abbr>/g);
			if (start) {
				for (var i = 0; i < start.length; i++) {
					start[i] = start[i].slice(22, -7);
					//Mojo.Log.info(start[i]);
				}
				
				//Education End: <abbr class="dtend">(.*?)<\/abbr>
				var edEnd = event.responseText.match(/<abbr class="dtend">(.*?)<\/abbr>/g);
				if (edEnd) {
					for (var i = 0; i < edEnd.length; i++) {
						edEnd[i] = edEnd[i].slice(20, -7);
						//Mojo.Log.info(edEnd[i]);
					}
				}
			}
		} else {
			if (wkEnd) {
				start = start.slice(wkEnd.length, start.length);
				//Mojo.Log.info("Start length:", start.length, start[0]);
			}
		}
		
		//end taken already in Work History
		
		//add to contact
		contact.education_history = [];
		for (i = 0; i < school.length; i++) {
			contact.education_history[i] = {
				school: school[i],	
			};
			if (start) {
				contact.education_history[i].period = start[i] + " &mdash; " + edEnd[i];
			}
		}
	}
	Mojo.Log.info("Completed creation of contact object for", contact.name);
		
	this.contacts[this.contactsReceived] = contact;
	this.contactsReceived++;
<<<<<<< .mine
	if (this.contactsReceived == 1) 
		this.updateProgress();
	if (this.contactsReceived == 60) {
=======
	var nextContact = this.contactsReceived + 2;
	this.updateProgress();
	Mojo.Log.info("Got here", nextContact, this.totalContacts);
	//If we've got all the contacts, store in DB; otherwise, initiate a new call if we haven't gotten them all.
	if (this.contactsReceived >= this.totalContacts) {
>>>>>>> .r140
		Mojo.Log.info("Storing contacts");
		this.storeInDepot();
	} else if (nextContact < this.totalContacts) {
		Mojo.Log.info("Initiating AJAX request for contact", nextContact, this.emails[nextContact]);
		var request = new Ajax.Request('http://m.linkedin.com' + this.links[nextContact], {
					method: 'get',
					onSuccess: this.contactReceivedHandler.bind(this, this.emails[nextContact]),
					onFailure: this.failureHandler.bind(this, 4)
					});
		Mojo.Log.info("Finishing AJAX request for contact", nextContact);
	}
	$("temp").innerHTML = this.contactsReceived + "of " + this.totalContacts + " received";

}

ConfigureAssistant.prototype.storeInDepot = function () {
	Mojo.Log.info("Loading Depot");
	this.contactDB = new Mojo.Depot({name: "contactDB", version: 1, estimatedSize: 1000000, replace: true}, this.loadDepotOk.bind(this), this.failureHandler.bind(this));
	Mojo.Log.info("Depot Load command complete");
}

ConfigureAssistant.prototype.loadDepotOk = function () {
	Mojo.Log.info("Initiating add contacts command");
	this.contactDB.add("contacts", this.contacts, this.contactsLoaded.bind(this), this.failureHandler.bind(this));
	Mojo.Log.info("Add contacts command complete");
}

ConfigureAssistant.prototype.contactsLoaded = function () {
	Mojo.Log.info("Success!");
	$("temp").innerHTML = "SUCCESS!";
	Mojo.Controller.stageController.swapScene("Splash");
}

ConfigureAssistant.prototype.updateProgress = function () {
	//this.progressbarModel.title = "Downloading " + round((this.contactsReceived / this.totalContacts) * 100) + "% complete";
	this.progressbarModel.progress = this.contactsReceived / this.totalContacts;
	
	Mojo.Log.info("Updated model", this.contactsReceived / this.totalContacts);
	this.controller.modelChanged(this.progressbarModel);
	Mojo.Log.info("Alerted about updated model");
}

ConfigureAssistant.prototype.failureHandler = function(code, event) {
	if (code == 1) {
		this.progressbarModel.title = "Email/password wrong; check and retry.";
		this.nameModel.disabled = false;
		this.passwordModel.disabled = false;
		this.controller.modelChanged(this.progressbarModel);
		this.controller.modelChanged(this.nameModel);
		this.controller.modelChanged(this.passwordModel);
	} else if (code == 2) {
		Mojo.Log.info("Failure logging into server.");
	} else if (code == 3) {
		Mojo.Log.info("Failure retrieving contact list");
	} else if (code == 4) {
		Mojo.Log.info("Failure retrieving a contact");
	}
	
	//$("temp").innerHTML = "Failure!";
	//Mojo.Log.info("Failure!");
}
ConfigureAssistant.prototype.activate = function(event) {
	/* put in event handlers here that should only be in effect when this scene is active. For
	   example, key handlers that are observing the document */
	   
	
}


ConfigureAssistant.prototype.deactivate = function(event) {
	/* remove any event handlers you added in activate and do any other cleanup that should happen before
	   this scene is popped or another scene is pushed on top */
}

ConfigureAssistant.prototype.cleanup = function(event) {
	/* this function should do any cleanup needed before the scene is destroyed as 
	   a result of being popped off the scene stack */
}



